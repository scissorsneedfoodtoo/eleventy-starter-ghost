{% extends 'layouts/default.njk' %}

{% set title = post.title %}
{% set codeinjection_head = post.codeinjection_head %}
{% set codeinjection_foot = post.codeinjection_foot %}
{% set js %}
  {% include "assets/fitvids.js" %}
{% endset %}

{% block content %}
    <main id="site-main" class="post-template site-main outer">
        <div class="inner">
            <article class="post-full post {{ "no-image" if not (post.feature_image) }}">
                <header class="post-full-header">
                    <section class="post-full-meta">
                        <time class="post-full-meta-date" datetime="{{ post.published_at }}">
                            {% publishedDate post.published_at, site.lang %}
                        </time>
                        {% if post.primary_tag %}
                            <span class="date-divider">/</span>
                            <a href="{{ post.primary_tag.url }}">
                                #{{ post.primary_tag.name }}
                            </a>
                        {% endif %}
                    </section>
                    <h1 class="post-full-title">{{ title }}</h1>
                </header>
                <div class="post-full-author-header">
                    {% if post.primary_author.name != "freeCodeCamp.org" %}
                        {% include "partials/byline-single-no-bio.njk" %}
                    {% endif %}
                </div>
                {% if post.feature_image %}
                    <figure class="post-full-image">
                        {% 
                            featureImage
                            post.feature_image,
                            "post-card-image",
                            post.title,
                            [
                                {
                                    mediaStr: "(max-width: 365px)",
                                    width: 300
                                },
                                {
                                    mediaStr: "(max-width: 655px)",
                                    width: 600
                                },
                                {
                                    mediaStr: "(min-width: 656px)",
                                    width: 1000
                                }
                            ]
                        %}

                        {# {% 
                            image
                            post.feature_image,
                            "post-card-image",
                            post.title,
                            "(max-width: 800px) 400px,
                             (max-width: 1170px) 700px,
                             1400px",
                            [300, 600, 1000]
                        %} #}
                    </figure>
                {% endif %}
                <section class="post-full-content">
                    <section class="post-content {{ "medium-migrated-article" if (post.primary_author.name == "freeCodeCamp.org") }}">
                        {{ content | safe }}
                    </section>
                    <hr />
                    {% if post.primary_author.name != "freeCodeCamp.org" %}
                        <div class="post-full-author-header">
                            {% include "partials/byline-single.njk" %}
                        </div>
                        <hr />
                    {% endif %}

                    {# Conditionally include partials based on Ghost language setting #}
                    {% ifAsync site.lang == "zh" or site.lang == "zh-cn" %}
                        {% include "partials/learn-cta-row.njk" %}
                        {% include "partials/comments.njk" %}
                    {% else %}
                        {% include "partials/social-row.njk" %}
                        {% include "partials/learn-cta-row.njk" %}
                    {% endif %}
                </section>
            </article>
        </div>
    </main>
    <script>
        {# {{ js | jsmin | safe }} #}
        {{ js | safe }}
        {# document.addEventListener('DOMContentLoaded', () => {
            const postContent = document.querySelector('.post-full-content');
            fitVids(postContent);
        }); #}
    </script>
    {# <script>
        document.addEventListener('DOMContentLoaded', () => {
            const postContent = document.querySelector('.post-full-content');
            const fitVids = (postContent, options) => {
                let count = 0;
                const settings = {
                    customSelector: null,
                    ignore: null
                };

                if (!document.getElementById('fit-vids-style')) {
                    const head = document.head || document.getElementsByTagName('head')[0];
                    const css = '.fluid-width-video-container{flex-grow: 1;width:100%;}.fluid-width-video-wrapper{width:100%;position:relative;padding:0;}.fluid-width-video-wrapper iframe,.fluid-width-video-wrapper object,.fluid-width-video-wrapper embed {position:absolute;top:0;left:0;width:100%;height:100%;}';
                    const div = document.createElement('div');
                    div.innerHTML = '<p>x</p><style id="fit-vids-style">' + css + '</style>';
                    head.appendChild(div.childNodes[1]);
                }

                if (options) {
                    Object.keys(options).forEach(key => {
                        settings[key] = options[key];
                    });
                }

                [...postContent.children].forEach(node => {
                    const selectors = [
                        'iframe[src*="player.vimeo.com"]',
                        'iframe[src*="youtube.com"]',
                        'iframe[src*="youtube-nocookie.com"]',
                        'iframe[src*="kickstarter.com"][src*="video.html"]',
                        'iframe[src*="player.bilibili.com"]',
                        'object',
                        'embed'
                    ];

                    if (settings.customSelector) {
                        settings.customSelector.split(',').forEach(str => selectors.push(str.trim()));
                    }

                    let ignoreList = ['fitvidsignore'];

                    if (settings.ignore) {
                        settings.ignore.split(',').forEach(str => ignoreList.push(str.replace('.', '').trim()));
                    }

                    let allVideos = [...node.querySelectorAll(selectors.join(','))];
                    allVideos = allVideos.filter(node => node !== 'object object'); // SwfObj conflict patch --> double check how this works
                    allVideos = allVideos.filter(node => !ignoreList.some(str => node.className.includes(str))); // Disable FitVids on this video

                    allVideos.forEach(videoNode => {
                        if (ignoreList.some(str => videoNode.parentNode.className.includes(str))) {
                            return; // Disable FitVids on this video
                        }
                        if (videoNode.tagName.toLowerCase() === 'embed' && videoNode.parentNode.getAttribute('object').length || videoNode.parentNode.classList.contains('fluid-width-video-wrapper')) { return; }
                        if ((!getComputedStyle(videoNode)['height'] && !getComputedStyle(videoNode)['width']) && (isNaN(videoNode.getAttribute('height')) || isNaN(videoNode.getAttribute('width'))))
                        {
                            videoNode.setAttribute('height', 9);
                            videoNode.setAttribute('width', 16);
                        }

                        let height = ( videoNode.tagName.toLowerCase() === 'object' || (videoNode.getAttribute('height') && !isNaN(parseInt(videoNode.getAttribute('height'), 10))) ) ? parseInt(videoNode.getAttribute('height'), 10) : parseFloat(getComputedStyle(videoNode, null).height.replace('px', '')),
                            width = !isNaN(parseInt(videoNode.getAttribute('width'), 10)) ? parseInt(videoNode.getAttribute('width'), 10) : parseFloat(getComputedStyle(videoNode, null).width.replace('px', '')),
                            aspectRatio = height / width;

                        if(!videoNode.getAttribute('name')){
                            const videoName = 'fitvid' + count;
                            videoNode.setAttribute('name', videoName);
                            count++;
                        }
                        const videoContainer = document.createElement('div');
                        videoContainer.classList.add('fluid-width-video-container');
                        const videoWrapper = document.createElement('div');
                        videoWrapper.style.paddingTop = `${aspectRatio * 100}%`;
                        videoWrapper.classList.add('fluid-width-video-wrapper');

                        // Append wrappers and video to page
                        videoNode.parentNode.appendChild(videoContainer);
                        videoContainer.appendChild(videoWrapper);
                        videoWrapper.appendChild(videoNode);

                        if (videoNode.getAttribute('height')) videoNode.removeAttribute('height');
                        if (videoNode.getAttribute('width')) videoNode.removeAttribute('width');
                    });
                });
            }

            fitVids(postContent, { customSelector: 'random selector', ignore: 'mycoolvid' });
        });
    </script> #}
{% endblock %}

{%- block seo -%}
    <!--Twitter Card-->
    <meta name="twitter:site" content="{{ site.twitter }}">
    <meta name="twitter:creator" content="{{ post.primary_author.twitter }}">
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:url" content="{{ site.url + page.url }}">
    <meta name="twitter:title" content="{{ title }} â€“ {{ site.title }}">
    <meta name="twitter:description" content="{{ post.excerpt }}">
    <meta name="twitter:image" content="{{ post.feature_image }}">

    <!--Schema-->
    <link rel="author" href="{{ post.primary_author.website }}">
    <link rel="publisher" href="{{ site.url }}">
    <meta itemprop="name" content="{{ title }} â€“ {{ site.title }}">
    <meta itemprop="description" content="{{ post.excerpt }}">
    <meta itemprop="image" content="{{ post.feature_image }}">

    <!-- Facebook OpenGraph -->
    <meta property="og:url" content="{{ site.url + page.url }}">
    <meta property="og:type" content="website">
    <meta property="og:title" content="{{ title }} â€“ {{ site.title }}">
    <meta property="og:image" content="{{ post.feature_image }}">
    <meta property="og:description" content="{{ post.excerpt }}">
    <meta property="og:site_name" content="{{ site.title }}">
    <meta property="og:locale" content="{{ site.lang }}">
    <meta property="article:author" content="{{ site.url }}">
{%- endblock -%}
